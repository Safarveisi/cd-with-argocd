name: Test and Build
on:
  push:
    branches:
      - master
    paths-ignore:
        - '**/*.png'
        - '**/*.md'
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
        - '**/*.png'
        - '**/*.md'

jobs:
    linting-and-static-code-check:
        runs-on: ubuntu-latest
        outputs:
          required_python_version: ${{ steps.minimum-python-version.outputs.required_python_version }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Get required Python version
              id: minimum-python-version
              run: |
                required_python_version=$(./run.sh get_required_python_version)
                echo "required_python_version=$required_python_version" >> $GITHUB_OUTPUT
                echo "Required Python version: $required_python_version"

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '${{ steps.minimum-python-version.outputs.required_python_version }}'

            - name: Cache pip packages
              id: cache-pip
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install pre-commit
              run: pip install pre-commit

            - name: Linting and static code check with pre-commit
              run: |
                pre-commit run --all-files

    version-check:
        runs-on: ubuntu-latest
        outputs:
            project_version: ${{ steps.get-project-version.outputs.project_version }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Extract package version from pyproject.toml
              id: get-project-version
              run: |
                project_version=$(./run.sh get_project_version)
                echo "project_version=$project_version" >> $GITHUB_OUTPUT
                echo "Project version: $project_version"

            - name: Check for existing tag
              run: |
                # This will fail in case the tag already exists
                git tag ${{ steps.get-project-version.outputs.project_version }}

    tests:
        runs-on: ubuntu-latest
        needs: [linting-and-static-code-check, version-check]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '${{ needs.linting-and-static-code-check.outputs.required_python_version }}'

            - name: Cache pip packages
              id: cache-pip
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install pytest
              run: pip install pytest

            - name: Run tests with pytest
              run: |
                pytest tests/

    build-docker-image-and-push-to-registry:
        runs-on: ubuntu-latest
        needs: [tests, version-check]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ciaa
                password: ${{ secrets.DOCKER_HUB_PASSWORD }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Run build check
              run: |
                # This validates the Dockerfile and the build configuration
                docker buildx build --check .

            - name: Local image smoke test (build & create container)
              run: |
                IMG_TAG_TEST="ciaa/demo_app:${{ needs.version-check.outputs.project_version }}-test"
                # Build locally (loads the single-platform build result to docker images)
                docker buildx build --platform linux/amd64 --load --tag "$IMG_TAG_TEST" .
                # This is a smoke test to ensure the image can be built and run
                docker run --rm "$IMG_TAG_TEST"

            - name: Build and push
              id: docker-image-build-and-push
              continue-on-error: true
              run: |
                IMG_TAG="ciaa/demo_app:${{ needs.version-check.outputs.project_version }}"
                # Build and push the image to Docker Hub
                # Capture stdout to output variable
                stdout=$(docker buildx build --platform linux/amd64 --tag "$IMG_TAG" --push . 2>&1)
                echo "$stdout"
                # Save full stdout
                echo "stdout<<EOF" >> $GITHUB_OUTPUT
                echo "$stdout" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT

            - uses: actions/github-script@v7
              if: github.event_name == 'pull_request'
              env:
                BUILD: "docker\n${{ steps.docker-image-build-and-push.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GIT_FG_TOKEN }}
                script: |
                    const output = `#### Docker build and push ⚙️ \`${{ steps.docker-image-build-and-push.outcome }}\`

                    <details>
                    <summary>Show build and push</summary>

                    \`\`\`
                    ${process.env.BUILD}
                    \`\`\`

                    </details>

                    *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

                    github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                    })

            - name: Docker build and push status
              if: steps.docker-image-build-and-push.outcome == 'failure'
              run: exit 1

    tag:
        runs-on: ubuntu-latest
        needs: [build-docker-image-and-push-to-registry, version-check]
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Push the tag
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GIT_FG_TOKEN }}
                script: |
                    github.rest.git.createRef({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: 'refs/tags/${{ needs.version-check.outputs.project_version }}',
                        sha: context.sha
                    })
